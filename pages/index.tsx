import React, { useState, useEffect } from "react";
import {
  Button,
  Row,
  Col,
  Container,
  Navbar,
  Nav,
  InputGroup,
  FormControl,
} from "react-bootstrap";

export default function Score() {
  const [userNum, setUserNum] = useState("");
  const [roundScore, setRoundScore] = useState<Array<number>>([0, 0, 0, 0, 0]);
  const [gameScore, setGameScore] = useState<Array<number>>([0, 0, 0, 0, 0]);
  const [viewAvg, setViewAvg] = useState(0);
  const [money, setMoney] = useState<Array<number>>([]);
  const [round, setRound] = useState(1);
  const [dotMoney, setDotMoney] = useState("");

  const [signal, setSignal] = useState(0);

  useEffect(() => {
    const allRoundScore = roundScore.reduce((x, y) => x + y);
    const avgRoundScore = allRoundScore / Number(userNum);
    const viewAvg = Math.round(avgRoundScore);
    setViewAvg(viewAvg);
  }, [roundScore, userNum, viewAvg]);

  const handleRoundClick = () => {
    let tmp = [...gameScore];

    for (let i = 0; i < Number(userNum); i++) {
      tmp[i] += roundScore[i];
    }
    setGameScore(tmp);

    setRound(round + 1);
  };

  const handleGameClick = () => {
    let tmp = [];
    const allGameScore = gameScore.reduce((x, y) => x + y);
    const avgGameScore = allGameScore / Number(userNum);

    for (let i = 0; i < Number(userNum); i++) {
      const subScore = avgGameScore - gameScore[i];
      tmp[i] = Math.round((subScore * Number(dotMoney)) / 100) * 100;
    }
    setMoney(tmp);

    setRound(1);
    setGameScore([0, 0, 0, 0, 0]);
    setSignal(0);
  };

  const handleClearClick = () => {
    setSignal(signal + 1);
    setRoundScore([0, 0, 0, 0, 0]);
  };

  const moneyList = money.map((money, index) => (
    <Col key={index}>
      <h6 className="d-flex justify-content-center">
        P{index + 1}: {money}
      </h6>
    </Col>
  ));

  const handleUserChange = (e: any) => {
    setUserNum(e.target.value);
  };

  const handleDotChange = (e: any) => {
    setDotMoney(e.target.value);
  };

  return (
    <Container fluid>
      <head>
        <title>Ppong</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </head>
      <Row>
        <Navbar bg="dark" variant="dark">
          <Navbar.Brand href="/">Ppong</Navbar.Brand>
          <Nav className="me-auto">
            <Nav.Link href="/">Score & Money</Nav.Link>
          </Nav>
        </Navbar>
      </Row>

      <br />

      <Row>
        <h1 className="text-center">Score & Money</h1>
      </Row>

      <Row className="align-content-center">
        <Col
          md="auto"
          className="d-flex justify-content-center align-items-center">
          플레이 유저 수:
        </Col>
        <Col md="2">
          <InputGroup>
            <FormControl value={userNum} onChange={handleUserChange} />
          </InputGroup>
        </Col>
        <Col
          md="auto"
          className="d-flex justify-content-center align-items-center">
          점 당 금액:
        </Col>
        <Col md="2">
          <InputGroup>
            <FormControl value={dotMoney} onChange={handleDotChange} />
          </InputGroup>
        </Col>
      </Row>

      <br />

      <Row>
        <Col>
          <h6 className="text-center">현재 라운드: {round}</h6>
        </Col>
        <Col>
          <h6 className="text-center">현재 라운드 평균 점수: {viewAvg}</h6>
        </Col>
      </Row>

      <InputForm
        row_num="1"
        roundScore={roundScore}
        setRoundScore={setRoundScore}
        gameScore={gameScore[0]}
        signal={signal}
      />
      <InputForm
        row_num="2"
        roundScore={roundScore}
        setRoundScore={setRoundScore}
        gameScore={gameScore[1]}
        signal={signal}
      />
      <InputForm
        row_num="3"
        roundScore={roundScore}
        setRoundScore={setRoundScore}
        gameScore={gameScore[2]}
        signal={signal}
      />
      <InputForm
        row_num="4"
        roundScore={roundScore}
        setRoundScore={setRoundScore}
        gameScore={gameScore[3]}
        signal={signal}
      />
      <InputForm
        row_num="5"
        roundScore={roundScore}
        setRoundScore={setRoundScore}
        gameScore={gameScore[4]}
        signal={signal}
      />

      <Row>{moneyList}</Row>

      <br />

      <Row>
        <Col className="d-flex justify-content-center">
          <Button onClick={handleRoundClick}>Round End</Button>
        </Col>
        <Col className="d-flex justify-content-center">
          <Button onClick={handleClearClick}>Clear</Button>
        </Col>
        <Col className="d-flex justify-content-center">
          <Button onClick={handleGameClick}>Game End</Button>
        </Col>
      </Row>
    </Container>
  );
}

function InputForm(props: any) {
  const [score, setScore] = useState<Array<string>>(
    [...Array(10)].map((_, i) => "")
  );
  const [sum, setSum] = useState("");

  const HandleChange = (e: any, col_num: number) => {
    let tmp = score;
    tmp[col_num] = e.target.value;
    if (tmp !== score) {
      setScore(tmp);
    }

    sumScore();
  };

  const sumScore = () => {
    const tmp = score.reduce((x, y) => String(Number(x) + Number(y)));
    setSum(tmp);
  };

  useEffect(() => {
    let tmp = [...props.roundScore];
    tmp[Number(props.row_num) - 1] = Number(sum);
    props.setRoundScore(tmp);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [sum]);

  useEffect(() => {
    const tmp = [...Array(10)].map((_, i) => "");
    setScore(tmp);
    setSum("");
  }, [props.signal]);

  return (
    <Row>
      <Col md="3">
        <h6>
          P{props.row_num}의 현재 라운드 점수: {sum}
        </h6>
      </Col>
      <Col md="auto">
        <h6>
          P{props.row_num}의 총 점수: {props.gameScore}
        </h6>
      </Col>
      <InputGroup className="mb-3">
        <InputGroup.Text>P{props.row_num}</InputGroup.Text>
        <FormControl value={score[0]} onChange={(e) => HandleChange(e, 0)} />
        <FormControl value={score[1]} onChange={(e) => HandleChange(e, 1)} />
        <FormControl value={score[2]} onChange={(e) => HandleChange(e, 2)} />
        <FormControl value={score[3]} onChange={(e) => HandleChange(e, 3)} />
        <FormControl value={score[4]} onChange={(e) => HandleChange(e, 4)} />
        <FormControl value={score[5]} onChange={(e) => HandleChange(e, 5)} />
        <FormControl value={score[6]} onChange={(e) => HandleChange(e, 6)} />
        <FormControl value={score[7]} onChange={(e) => HandleChange(e, 7)} />
        <FormControl value={score[8]} onChange={(e) => HandleChange(e, 8)} />
        <FormControl value={score[9]} onChange={(e) => HandleChange(e, 9)} />
      </InputGroup>
    </Row>
  );
}
